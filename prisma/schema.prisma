generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  dateOfBirth      DateTime
  phone            String
  profile          Profile?
  sessions         Session[]
  accounts         Account[]

  @@unique([email])
  @@map("user")
}

model Profile {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender      String?
  name        String
  imgUrl      String?  @db.Text
  phone       String
  email       String   @unique @db.Text
  location    String?
  jobTitle    String?
  dateOfBirth DateTime
  about       String?
  skills      String?
  availableForMentoring Boolean? @default(false)
  streamRegistered Boolean?  @default(false)
  role        String?
  mentoringSessions MentoringSession[] @relation("MentorSessions")
  learningSessions  MentoringSession[] @relation("MenteeSessions")
  socialLinks SocialLinks?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

// Social Links Model
model SocialLinks {
  id        String   @id @default(uuid())
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  facebook  String?
  instagram    String?
  telegram   String?
  whatsapp   String?
  x   String?
  linkedin  String?
  github    String?
  behance   String?
  dribbble   String?
  youtube   String?
  pinterest String?

  @@map("profile_social_links")
}

model Session {
  id             String   @id @default(uuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum SessionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
  UPCOMING
}

model MentoringSession {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       String?
  thumbnail   String?       @db.Text
  startTime   DateTime
  endTime     DateTime?
  status      SessionStatus @default(PENDING)
  notes       String?
  
  // Relationships
  mentorId    String
  mentor      Profile          @relation("MentorSessions", fields: [mentorId], references: [id], onDelete: Cascade)
  menteeId    String
  mentee      Profile          @relation("MenteeSessions", fields: [menteeId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("mentoring_session")
}
