generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  dateOfBirth   DateTime
  profile       Profile?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Profile {
  id          String   @id
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  imgUrl      String?  @db.Text
  phone       String
  email       String   @db.Text
  location    String?
  jobTitle    String?
  dateOfBirth DateTime
  about       String?
  skills      String?

  servers  Server[]
  member   Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profile")
}

// Server Model
model Server {
  id          String  @id
  name        String  @unique
  imgUrl      String? @db.Text
  inviteCode  String? @db.Text
  description String?

  profileId String?   @db.Text
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Members   Member[]
  Channels  Channel[]

  @@map("server")
}

enum MemberRole {
  USER
  ADMIN
  MODERATOR
}

model Member {
  id        String     @id
  serverId  String
  profileId String
  role      MemberRole
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  server  Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([serverId, profileId])
  @@map("member")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id
  name      String      @unique
  type      ChannelType
  profileId String?     @db.Text
  profile   Profile?    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // messages    Message[]

  @@map("channel")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
